{"version":3,"sources":["config/colors/colors.js","components/Button/Button.js","components/TextInput/TextInput.js","components/H1/H1.js","components/Preview/Preview.js","components/Message/Message.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","fontSize","fontFamily","fontWeight","color","colors","borderWidth","borderColor","marginTop","marginRight","marginLeft","width","backgroundColor","breakpoints","down","display","AppButton","children","disabled","onClick","classes","Button","variant","className","input","border","borderRadius","padding","TextInput","onChange","value","InputBase","id","placeholder","fullWidth","autoComplete","onPaste","e","preventDefault","H1","Preview","text","userInput","preview","split","map","letter","i","letterColor","length","style","Message","App","useState","setUserInput","started","setStarted","done","setDone","secs","setSecs","interv","setInterv","stopped","setStopped","message","setMessage","num","onFinish","val","clearInterval","makeMessage","setTimer","setInterval","toFixed","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ac9535f.chunk.js","sourcesContent":["export default {\n    primary: '#66fcf1',\n    secondary: '#45A29E',\n    buttonHover: '#427a78',\n    buttonText: '#fff',\n    buttonDisabled: '#2c5755'\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport colors from \"../../config/colors/colors\";\n\nconst AppButton = ({children, color, disabled, onClick}) => {\n    const classes = useStyles();\n    return (\n        <Button\n            variant=\"outlined\"\n            color={color}\n            disabled={disabled}\n            onClick={onClick}\n            className={classes.root}\n        >\n            {children}\n        </Button>\n    );\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        fontSize: \"100%\",\n        fontFamily: \"Monda\",\n        fontWeight: \"bold\",\n        color: colors.primary,\n        borderWidth: \"2px\",\n        borderColor: colors.secondary,\n        marginTop: \"15px\",\n        marginRight: '10px',\n        marginLeft: '10px',\n        width: '25%',\n        '&:hover': {\n            borderWidth: \"2px\",\n            borderColor: colors.buttonHover,\n            backgroundColor: \"transparent\"\n        },\n        '&:disabled': {\n            borderWidth: \"2px\",\n            borderColor: colors.buttonDisabled,\n            color: colors.buttonDisabled\n        },\n        [theme.breakpoints.down(1200)]: {\n            display: 'block',\n            width: '100%',\n            fontSize: '100%',\n            marginTop: '10px',\n            marginLeft: '0px',\n            marginRight: '0px'\n        }\n    }\n}))\n\nexport default AppButton;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputBase from '@material-ui/core/InputBase';\nimport colors from \"../../config/colors/colors\";\n\nconst TextInput = ({onChange, disabled, value}) => {\n    const classes = useStyles();\n\n    const handleChange = (e) => {\n      e.preventDefault();\n    }\n    \n    return (\n        <InputBase\n          id=\"standard-full-width\"\n          placeholder=\"Start typing your sh*t here\"\n          fullWidth\n          classes={{\n              root: classes.input,\n              disabled: classes.disabled,\n          }}\n          variant=\"outlined\"\n          onChange={onChange}\n          disabled={disabled}\n          value={value}\n          autoComplete=\"off\"\n          onPaste={handleChange}\n        />\n    );\n};\n\nconst useStyles = makeStyles(() => ({\n  input: {\n      color: 'white', \n      border: '2px solid',\n      borderColor: colors.secondary,\n      borderRadius: '10px',\n      padding: '10px',\n      fontWeight: 'bold',\n      \n  },\n  disabled: {\n    color: colors.buttonDisabled,\n  },\n}));\n\nexport default TextInput;","import React from 'react';\nimport './H1.css';\n\nconst H1 = ({children}) => {\n    return (\n        <h1 className='text'>\n            {children}\n        </h1>\n    );\n};\n\nexport default H1;","import React from 'react';\nimport './Preview.css';\n\nconst Preview = ({text, userInput}) => {\n    const preview = text.split('');\n    const input = userInput.split('');\n\n    return (\n        <>\n            {\n                preview.map((letter, i) => {\n                    let letterColor;\n                    if( i < userInput.length){\n                        letterColor = letter === input[i] ? '#66FCF1' : '#EE4C7C'\n                    }\n                    return (\n                        <span\n                            className=\"texts\" \n                            key={i}\n                            style={{\n                                color: letterColor,\n                            }}\n                        >\n                            {letter}\n                        </span>\n                    )\n                })\n            }\n        </>\n    );\n};\n\nexport default Preview;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport colors from \"../../config/colors/colors\";\n\nfunction Message({children}) {\n    const classes = useStyles();\n    return (\n        <h2\n            className={classes.root}\n        >\n            {children}\n        </h2>\n    );\n}\n\nconst useStyles = makeStyles(() => ({\n  root: {\n      fontFamily: 'Monda',\n      fontSize: '30px',\n      fontWeight: 'bold'\n  },\n}));\n\nexport default Message;","import './App.css';\n\nimport Button from \"./components/Button/Button\";\nimport TextInput from \"./components/TextInput/TextInput\";\nimport H1 from \"./components/H1/H1\";\nimport Preview from \"./components/Preview/Preview\";\nimport Message from \"./components/Message/Message\";\nimport { useState } from 'react';\n\nfunction App() {\n  const text = \"I am a programmer and I cry all day long because I am a little bitch\";\n  const [userInput, setUserInput] = useState('');\n  const [started, setStarted] = useState(false); \n  const [done, setDone] = useState(false);\n  const [secs, setSecs] = useState(0);\n  const [interv, setInterv] = useState();\n  const [stopped, setStopped] = useState(false);\n  const [message, setMessage] = useState('');\n  let num = 0;\n\n  const onUserInputChange = (e) => {\n    const val = e.target.value;\n    setTimer();\n    onFinish(val);\n    setUserInput(val);\n  }\n\n  const onFinish = (val) => {\n    if(val === text){\n      clearInterval(interv);\n      setDone(true);\n      setStopped(true);\n      makeMessage();\n    };\n  }\n\n  const setTimer = () => {\n    if(!started){\n      setStarted(true);\n      setInterv(setInterval(() => {\n        num += 0.01;\n        setSecs(num.toFixed(2));\n      }, 10));\n    }\n  }\n\n  const handleStop = () => {\n    clearInterval(interv);\n    setStopped(true);\n  }\n\n  const handleRestart = () => {\n    setStarted(false);\n    setStopped(false);\n    setDone(false);\n    setUserInput('');\n    num = 0;\n    setSecs(num);\n  }\n\n  const makeMessage = () => {\n    if(secs <= 5){\n      setMessage('A noob with fast fingers, I wonder how much hentai have you watched. Here is your trophy tho 🏆');\n    }\n    else if(secs <= 10){\n      setMessage('Slow fingers, gotta start coding in Java, you noob');\n    }\n    else if (secs <= 68){\n      setMessage('Are you fucking kidding me? Even PHP is faster');\n    }\n    else if (secs === 69){\n      setMessage('😏😏😏😏😏😏😏😏😏😏😏😏😏')\n    }\n    else {\n      setMessage('I hate you')\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <H1>\n            Stupid Typing Test\n          </H1>\n          <div className=\"Preview\">\n            <Preview \n              text={text}\n              userInput={userInput}\n            />\n          </div>\n          <div className='Input'>\n            <TextInput \n              onChange={onUserInputChange}\n              disabled={done}\n              value={userInput}\n            />\n          </div>\n          <div className='Seconds'>\n              <span>{secs}</span>\n          </div>\n          <div className=\"Buttons\">\n            <Button\n              color=\"primary\"\n              onClick={handleStop}\n              disabled={!started || stopped} \n            >\n              Stop\n            </Button>\n            <Button\n              color=\"primary\"\n              onClick={handleRestart}\n              disabled={!stopped}\n            >\n              Restart\n            </Button>\n          </div>\n          <div className=\"Message\">\n            {done ? (\n              <Message>\n                {message}\n              </Message>\n            ) : null}\n          </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}